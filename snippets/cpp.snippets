# +--------------------------------------------------------+
# |   FileName: cpp.snippets                               |
# |       Desc: Personal CPP Snippets                      |
# |     Author: Joshua                                     |
# |      Email: joshua7v@hotmail.com                       |
# |   HomePage: https://blog.sigmastudio.me                |
# |    Version: 0.0.1                                      |
# | LastChange: 2016-03-23 02:28:56                        |
# |    History:                                            |
# +--------------------------------------------------------+

# include "..."
snippet INC
#include "${1:TODO}"${2}
endsnippet

# include <...>
snippet inc
#include <${1:TODO}>${2}
endsnippet

# main
snippet main
int main(int argc, char **argv)
{
    ${1:TODO}

    return 0;
}
endsnippet

# if
snippet if
if (${1:/* condition */}) {
	${2:TODO}
}
endsnippet

# else if 
snippet ei 
else if (${1:/* condition */}) { 
    ${2:TODO} 
} 
endsnippet

# else 
snippet el 
else { 
    ${1:TODO} 
} 
endsnippet

# return 
snippet re 
return(${1:/* condition */});
endsnippet

# Do While Loop 
snippet do 
do { 
    ${2:TODO} 
} while (${1:/* condition */}); 
endsnippet

# While Loop 
snippet wh 
while (${1:/* condition */}) { 
    ${2:TODO} 
} 
endsnippet

# switch 
snippet sw 
switch (${1:/* condition */}) { 
    case ${2:c}: { 
    } 
    break; 

    default: { 
    } 
    break; 
} 
endsnippet

# iterator rw 
snippet for 
for (auto ${2:iter} = ${1:c}.begin(); ${3:$2} != $1.end(); ${4:++iter}) {
    ${5:TODO} 
} 
endsnippet

# iterator ro 
snippet cfor 
for (auto ${2:citer} = ${1:c}.cbegin(); ${3:$2} != $1.cend(); ${4:++citer}) { 
    ${5:TODO} 
} 
endsnippet

# iterator index 
snippet For 
for (decltype($1.size()) ${2:i} = 0; $2 != ${1}.size(); ${3:++}$2) { 
    ${4:TODO} 
} 
endsnippet

# for c++11 rw
snippet F 
for (auto& e : ${1:c}) { 
} 
endsnippet

# for c++11 ro
snippet CF 
for (const auto& e : ${1:c}) { 
} 
endsnippet

# For Loop 
snippet FOR 
for (unsigned ${2:i} = 0; $2 < ${1:count}; ${3:++}$2) { 
    ${4:TODO} 
} 
endsnippet

# try-catch 
snippet try 
try { 
} catch (${1:/* condition */}) { 
} 
endsnippet
snippet ca 
catch (${1:/* condition */}) { 
} 
endsnippet
snippet throw 
th (${1:/* condition */}); 
endsnippet

# std::vector 
snippet vec 
vector<${1:char}>   v${2}; 
endsnippet

# std::list 
snippet lst 
list<${1:char}> l${2}; 
endsnippet

# std::set 
snippet set 
set<${1:key}>   s${2}; 
endsnippet

# std::map 
snippet map 
map<${1:key}, ${2:value}>   m${3}; 
endsnippet

# Class 
snippet cl 
class ${1:`Filename('$1_t', 'name')`} 
{ 
    public: 
        $1 (); 
        virtual ~$1 (); 

    private: 
}; 
endsnippet

# bracket
snippet b "bracket" i 
(${1})${2} 
endsnippet

# square bracket
snippet st "square bracket" i 
[${1}]${2} 
endsnippet

# brace 
snippet br "brace" i 
{ 
    ${1} 
}${2} 
endsnippet

# single quote
snippet se "single quote" I
'${1}'${2}
endsnippet

# double quote
snippet q "quote" I
"${1}"${2}
endsnippet

# arrow 
snippet ar "arrow" i 
->${1}
endsnippet

# dot
snippet d "dot" i 
.${1} 
endsnippet

# scope 
snippet s "scope" i 
::${1} 
endsnippet